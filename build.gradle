plugins {
    id 'java'
    id 'com.gradleup.shadow' version '8.3.2'
    id("io.papermc.paperweight.userdev") version "1.7.4"
}

group = 'com.github.kuramastone'
version = '1.0.0'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = "https://repo.xenondevs.xyz/releases"
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    // paper
    compileOnly("io.papermc.paper:paper-api:1.20.4-R0.1-SNAPSHOT")
    paperweight.paperDevBundle("1.20.4-R0.1-SNAPSHOT")

    // yaml libraries
    compileOnly 'net.kyori:adventure-api:4.5.0'
    compileOnly 'net.kyori:adventure-text-serializer-plain:4.14.0'
    implementation 'org.yaml:snakeyaml:2.0'

    // annotations
    implementation 'org.jetbrains:annotations:24.0.1'

    // gui manager
    implementation 'xyz.xenondevs.invui:invui:1.39'

    // vault money manager
    compileOnly 'com.github.MilkBowl:VaultAPI:1.7'

    //mongo database
    implementation 'org.mongodb:mongodb-driver-sync:5.2.0' // Check for the latest version

    // apache http for discord webhook
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'

    // testing
    testImplementation 'net.kyori:adventure-api:4.5.0'
    testImplementation 'net.kyori:adventure-text-serializer-plain:4.14.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.2'

}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

tasks.assemble {
    dependsOn(tasks.reobfJar)
}

shadowJar {
    destinationDirectory = file('E:\\Documents\\MinecraftServer\\1.20.4 Paper\\plugins')
    relocate 'org/yaml', "${project.group}.shade.org.yaml"
    relocate 'org/jetbrains', "${project.group}.shade.org.jetbrains"
    relocate 'org/intellij', "${project.group}.shade.org.intellij"

    archiveClassifier = ''
    archiveFileName = "${project.name}-${version}.jar"
}
